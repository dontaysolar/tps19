"""
TPS19 Database Models
SQLAlchemy ORM models for the trading system
"""

from datetime import datetime
from decimal import Decimal
from typing import Optional
from sqlalchemy import (
    Column, Integer, String, Float, DateTime, Boolean, 
    Text, JSON, ForeignKey, Index, UniqueConstraint,
    Numeric, Enum as SQLEnum
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import enum


Base = declarative_base()


class OrderStatus(enum.Enum):
    """Order status enumeration"""
    PENDING = "pending"
    OPEN = "open"
    FILLED = "filled"
    PARTIALLY_FILLED = "partially_filled"
    CANCELLED = "cancelled"
    REJECTED = "rejected"
    EXPIRED = "expired"


class OrderType(enum.Enum):
    """Order type enumeration"""
    MARKET = "market"
    LIMIT = "limit"
    STOP_LOSS = "stop_loss"
    STOP_LIMIT = "stop_limit"
    TAKE_PROFIT = "take_profit"


class OrderSide(enum.Enum):
    """Order side enumeration"""
    BUY = "buy"
    SELL = "sell"


class SignalType(enum.Enum):
    """Trading signal type"""
    BUY = "buy"
    SELL = "sell"
    HOLD = "hold"
    CLOSE = "close"


class MarketData(Base):
    """Market data model for storing price information"""
    __tablename__ = "market_data"
    
    id = Column(Integer, primary_key=True)
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(50), nullable=False, default="crypto.com")
    timestamp = Column(DateTime, nullable=False, index=True)
    
    # Price data
    open = Column(Numeric(20, 8), nullable=False)
    high = Column(Numeric(20, 8), nullable=False)
    low = Column(Numeric(20, 8), nullable=False)
    close = Column(Numeric(20, 8), nullable=False)
    volume = Column(Numeric(20, 8), nullable=False)
    
    # Additional data
    trades_count = Column(Integer)
    vwap = Column(Numeric(20, 8))  # Volume weighted average price
    
    created_at = Column(DateTime, server_default=func.now())
    
    __table_args__ = (
        Index("idx_market_data_symbol_timestamp", "symbol", "timestamp"),
        UniqueConstraint("symbol", "exchange", "timestamp", name="uq_market_data")
    )


class Order(Base):
    """Order model for tracking trades"""
    __tablename__ = "orders"
    
    id = Column(Integer, primary_key=True)
    order_id = Column(String(64), unique=True, nullable=False, index=True)
    client_order_id = Column(String(64), unique=True, index=True)
    
    # Order details
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(50), nullable=False, default="crypto.com")
    side = Column(SQLEnum(OrderSide), nullable=False)
    type = Column(SQLEnum(OrderType), nullable=False)
    status = Column(SQLEnum(OrderStatus), nullable=False, index=True)
    
    # Quantities and prices
    quantity = Column(Numeric(20, 8), nullable=False)
    filled_quantity = Column(Numeric(20, 8), default=0)
    price = Column(Numeric(20, 8))  # Null for market orders
    average_price = Column(Numeric(20, 8))
    stop_price = Column(Numeric(20, 8))  # For stop orders
    
    # Fees
    fee = Column(Numeric(20, 8), default=0)
    fee_currency = Column(String(10))
    
    # Timestamps
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    filled_at = Column(DateTime)
    cancelled_at = Column(DateTime)
    
    # Relationships
    trades = relationship("Trade", back_populates="order")
    
    # Metadata
    strategy = Column(String(50))
    signal_id = Column(Integer, ForeignKey("trading_signals.id"))
    notes = Column(Text)
    metadata = Column(JSON)


class Trade(Base):
    """Trade model for executed trades"""
    __tablename__ = "trades"
    
    id = Column(Integer, primary_key=True)
    trade_id = Column(String(64), unique=True, nullable=False, index=True)
    order_id = Column(String(64), ForeignKey("orders.order_id"), nullable=False)
    
    # Trade details
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(50), nullable=False, default="crypto.com")
    side = Column(SQLEnum(OrderSide), nullable=False)
    
    # Execution details
    quantity = Column(Numeric(20, 8), nullable=False)
    price = Column(Numeric(20, 8), nullable=False)
    fee = Column(Numeric(20, 8), default=0)
    fee_currency = Column(String(10))
    
    # Timestamps
    executed_at = Column(DateTime, nullable=False)
    created_at = Column(DateTime, server_default=func.now())
    
    # Relationships
    order = relationship("Order", back_populates="trades")


class TradingSignal(Base):
    """Trading signals generated by AI/strategies"""
    __tablename__ = "trading_signals"
    
    id = Column(Integer, primary_key=True)
    
    # Signal details
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(50), nullable=False, default="crypto.com")
    signal_type = Column(SQLEnum(SignalType), nullable=False)
    
    # Signal strength and confidence
    strength = Column(Float, nullable=False)  # -1.0 to 1.0
    confidence = Column(Float, nullable=False)  # 0.0 to 1.0
    
    # Price targets
    entry_price = Column(Numeric(20, 8))
    stop_loss = Column(Numeric(20, 8))
    take_profit = Column(Numeric(20, 8))
    
    # Source and reasoning
    source = Column(String(50), nullable=False)  # Strategy or AI module name
    reasoning = Column(Text)
    analysis_data = Column(JSON)
    
    # Execution
    executed = Column(Boolean, default=False)
    execution_price = Column(Numeric(20, 8))
    execution_time = Column(DateTime)
    
    # Performance
    pnl = Column(Numeric(20, 8))  # Profit/Loss if executed
    pnl_percentage = Column(Float)
    
    # Timestamps
    created_at = Column(DateTime, server_default=func.now())
    expires_at = Column(DateTime)
    
    __table_args__ = (
        Index("idx_signals_symbol_created", "symbol", "created_at"),
    )


class AIDecision(Base):
    """AI Council decisions and learning"""
    __tablename__ = "ai_decisions"
    
    id = Column(Integer, primary_key=True)
    
    # Decision details
    decision_type = Column(String(50), nullable=False)
    decision = Column(String(50), nullable=False)
    confidence = Column(Float, nullable=False)
    
    # Input and output
    input_data = Column(JSON, nullable=False)
    output_data = Column(JSON)
    modules_involved = Column(JSON)  # List of AI modules used
    
    # Outcome tracking
    outcome = Column(String(50))  # success, failure, partial
    outcome_value = Column(Float)  # Numerical outcome (e.g., profit/loss)
    feedback_processed = Column(Boolean, default=False)
    
    # Timestamps
    created_at = Column(DateTime, server_default=func.now())
    outcome_at = Column(DateTime)
    
    __table_args__ = (
        Index("idx_ai_decisions_type_created", "decision_type", "created_at"),
    )


class SystemMetric(Base):
    """System performance metrics"""
    __tablename__ = "system_metrics"
    
    id = Column(Integer, primary_key=True)
    
    # Metric details
    metric_name = Column(String(100), nullable=False, index=True)
    metric_value = Column(Float, nullable=False)
    metric_unit = Column(String(20))
    
    # Context
    component = Column(String(50))  # Which system component
    tags = Column(JSON)  # Additional tags for filtering
    
    # Timestamp
    timestamp = Column(DateTime, nullable=False, index=True)
    created_at = Column(DateTime, server_default=func.now())
    
    __table_args__ = (
        Index("idx_metrics_name_timestamp", "metric_name", "timestamp"),
    )


class Portfolio(Base):
    """Portfolio holdings and balances"""
    __tablename__ = "portfolio"
    
    id = Column(Integer, primary_key=True)
    
    # Asset details
    asset = Column(String(20), nullable=False, unique=True)
    exchange = Column(String(50), nullable=False, default="crypto.com")
    
    # Balances
    total_balance = Column(Numeric(20, 8), nullable=False, default=0)
    available_balance = Column(Numeric(20, 8), nullable=False, default=0)
    locked_balance = Column(Numeric(20, 8), nullable=False, default=0)
    
    # Value tracking
    last_price = Column(Numeric(20, 8))
    value_usd = Column(Numeric(20, 8))
    
    # Cost basis
    average_cost = Column(Numeric(20, 8))
    total_cost = Column(Numeric(20, 8))
    realized_pnl = Column(Numeric(20, 8), default=0)
    unrealized_pnl = Column(Numeric(20, 8), default=0)
    
    # Timestamps
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())


class BacktestResult(Base):
    """Backtest results storage"""
    __tablename__ = "backtest_results"
    
    id = Column(Integer, primary_key=True)
    test_id = Column(String(64), unique=True, nullable=False)
    
    # Test parameters
    strategy = Column(String(50), nullable=False)
    symbol = Column(String(20), nullable=False)
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    initial_capital = Column(Numeric(20, 8), nullable=False)
    
    # Results
    final_capital = Column(Numeric(20, 8), nullable=False)
    total_return = Column(Float, nullable=False)
    sharpe_ratio = Column(Float)
    max_drawdown = Column(Float)
    win_rate = Column(Float)
    profit_factor = Column(Float)
    
    # Trade statistics
    total_trades = Column(Integer, nullable=False)
    winning_trades = Column(Integer)
    losing_trades = Column(Integer)
    avg_win = Column(Numeric(20, 8))
    avg_loss = Column(Numeric(20, 8))
    
    # Detailed results
    equity_curve = Column(JSON)
    trade_log = Column(JSON)
    parameters = Column(JSON)
    metrics = Column(JSON)
    
    # Timestamps
    created_at = Column(DateTime, server_default=func.now())
    completed_at = Column(DateTime)


# Create indexes for better query performance
Index("idx_orders_status_created", Order.status, Order.created_at)
Index("idx_trades_symbol_executed", Trade.symbol, Trade.executed_at)
Index("idx_portfolio_updated", Portfolio.updated_at)