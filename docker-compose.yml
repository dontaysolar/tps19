version: '3.8'

services:
  tps19:
    build: .
    container_name: tps19-trading
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    ports:
      - "8000:8000"  # Metrics/API port
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - tps19-network
    command: python main.py start

  postgres:
    image: postgres:15-alpine
    container_name: tps19-postgres
    environment:
      POSTGRES_DB: tps19
      POSTGRES_USER: tps19
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - tps19-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: tps19-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - tps19-network
    restart: unless-stopped

  n8n:
    image: n8nio/n8n
    container_name: tps19-n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-changeme}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://n8n:5678/
    volumes:
      - n8n-data:/home/node/.n8n
    ports:
      - "5678:5678"
    networks:
      - tps19-network
    restart: unless-stopped

  # Optional: Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: tps19-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - tps19-network
    restart: unless-stopped

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: tps19-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - tps19-network
    restart: unless-stopped

networks:
  tps19-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  n8n-data:
  grafana-data:
  prometheus-data: