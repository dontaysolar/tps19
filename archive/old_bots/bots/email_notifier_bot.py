#!/usr/bin/env python3
"""Email Notifier - Send alerts via email"""
from datetime import datetime
from typing import Dict, List

class EmailNotifierBot:
    def __init__(self):
        self.name = "Email_Notifier"
        self.version = "1.0.0"
        self.enabled = True
        
        self.smtp_server = None
        self.from_email = None
        self.to_emails = []
        
        self.metrics = {'emails_sent': 0, 'errors': 0}
    
    def configure(self, smtp_server: str, from_email: str, to_emails: List[str]):
        """Configure email settings"""
        self.smtp_server = smtp_server
        self.from_email = from_email
        self.to_emails = to_emails
    
    def send_email(self, subject: str, body: str, html: bool = False) -> Dict:
        """Send email alert"""
        if not self.smtp_server or not self.from_email:
            return {'error': 'Email not configured', 'sent': False}
        
        # Simulate sending
        try:
            self.metrics['emails_sent'] += 1
            return {
                'sent': True,
                'subject': subject,
                'recipients': len(self.to_emails),
                'timestamp': datetime.now().isoformat()
            }
        except Exception as e:
            self.metrics['errors'] += 1
            return {'sent': False, 'error': str(e)}
    
    def send_daily_report(self, report_data: Dict) -> Dict:
        """Send daily performance report"""
        subject = f"APEX Trading Report - {datetime.now().strftime('%Y-%m-%d')}"
        
        body = f"""
        Daily Trading Report
        
        Total P&L: ${report_data.get('pnl', 0):,.2f}
        Trades: {report_data.get('trades', 0)}
        Win Rate: {report_data.get('win_rate', 0):.1f}%
        Best Trade: ${report_data.get('best_trade', 0):,.2f}
        Worst Trade: ${report_data.get('worst_trade', 0):,.2f}
        
        Generated by APEX Nexus V2
        """
        
        return self.send_email(subject, body)
    
    def get_status(self) -> Dict:
        return {
            'name': self.name,
            'version': self.version,
            'enabled': self.enabled,
            'configured': bool(self.smtp_server),
            'recipients': len(self.to_emails),
            'metrics': self.metrics,
            'last_update': datetime.now().isoformat()
        }

if __name__ == '__main__':
    bot = EmailNotifierBot()
    print(f"âœ… {bot.name} v{bot.version} initialized")
