#!/bin/bash
# TPS19 FULLY AUTONOMOUS DEPLOYMENT SCRIPT
# Installs, tests, and starts the bot - runs completely unattended
# Safe to close laptop after starting

set -e  # Exit on error

LOG_FILE=~/tps19_autonomous_deploy.log

# Function to log with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

log "============================================================"
log "ü§ñ TPS19 AUTONOMOUS DEPLOYMENT - STARTING"
log "============================================================"

cd ~/tps19

log "üì• Pulling latest code from GitHub..."
git pull origin main 2>&1 | tee -a "$LOG_FILE"

log "üîß Making scripts executable..."
chmod +x *.sh *.py 2>/dev/null

log "üìÅ Creating directories..."
mkdir -p data/models data/databases logs config patches backups
chmod 755 data data/models data/databases logs config patches backups

log "üîë Configuring API keys..."
cat > .env << 'ENVEOF'
# TPS19 Production Configuration
EXCHANGE_API_KEY=A8YmbndHwWATwn6WScdUco
EXCHANGE_API_SECRET=cxakp_gJ4ZFRhFSzq6tyxuLrwqJn

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=7289126201:AAHaWTLKxpddtbJ9oa4hGdvKaq0mypqU75Y
TELEGRAM_CHAT_ID=7517400013

# Alpha Vantage API
ALPHA_VANTAGE_API_KEY=P6NYOL1UB59UXI42

# TPS19 Configuration
TPS19_ENV=production
TRADING_ENABLED=true
ENABLE_LSTM_PREDICTION=true
ENABLE_SELF_LEARNING=true
LOG_LEVEL=INFO
ENVEOF
chmod 600 .env

log "‚úÖ Configuration complete!"

log "üì¶ Upgrading pip..."
python3 -m pip install --upgrade pip --break-system-packages 2>&1 | tee -a "$LOG_FILE"

log "‚è≥ Installing Python dependencies (10-15 minutes)..."
log "   This will take a while - installing TensorFlow and other packages"

# Install in stages with progress
log "   ‚Üí Installing numpy, pandas, scikit-learn..."
pip3 install --break-system-packages numpy pandas scikit-learn 2>&1 | tee -a "$LOG_FILE"

log "   ‚Üí Installing TensorFlow (this is the big one - 8-10 minutes)..."
pip3 install --break-system-packages tensorflow 2>&1 | tee -a "$LOG_FILE"

log "   ‚Üí Installing Redis and utilities..."
pip3 install --break-system-packages redis python-dotenv requests 2>&1 | tee -a "$LOG_FILE"

log "   ‚Üí Installing Google API libraries..."
pip3 install --break-system-packages google-auth google-auth-oauthlib google-api-python-client 2>&1 | tee -a "$LOG_FILE"

log "   ‚Üí Installing Telegram bot library..."
pip3 install --break-system-packages python-telegram-bot 2>&1 | tee -a "$LOG_FILE"

log "‚úÖ All dependencies installed!"

log "üîç Running comprehensive validation tests..."
python3 comprehensive_test_suite.py 2>&1 | tee -a "$LOG_FILE"

VALIDATION_EXIT_CODE=$?

if [ $VALIDATION_EXIT_CODE -eq 0 ]; then
    log "‚úÖ ALL TESTS PASSED!"
else
    log "‚ö†Ô∏è  Some tests failed (exit code: $VALIDATION_EXIT_CODE)"
    log "   Checking if critical tests passed..."
    
    # Check if numpy/tensorflow are available (critical for trading)
    python3 -c "import numpy, pandas, tensorflow" 2>/dev/null
    if [ $? -eq 0 ]; then
        log "‚úÖ Core dependencies available - proceeding with bot startup"
    else
        log "‚ùå Critical dependencies missing - cannot start bot"
        exit 1
    fi
fi

log "üì± Testing Telegram connection..."
python3 test_telegram.py 2>&1 | tee -a "$LOG_FILE" || log "‚ö†Ô∏è  Telegram test had issues (non-critical)"

log "üöÄ Starting TPS19 Trading Bot in background..."

# Install tmux if not present
if ! command -v tmux &> /dev/null; then
    log "   Installing tmux..."
    sudo apt-get update -qq
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y tmux 2>&1 | tee -a "$LOG_FILE"
fi

# Kill any existing tps19 session
tmux kill-session -t tps19 2>/dev/null || true

# Start bot in tmux session
tmux new-session -d -s tps19 "cd ~/tps19 && python3 tps19_main.py 2>&1 | tee -a ~/tps19/logs/bot_$(date +%Y%m%d_%H%M%S).log"

# Wait a moment for bot to start
sleep 5

# Check if bot is running
if tmux has-session -t tps19 2>/dev/null; then
    log "‚úÖ TPS19 Bot started successfully in background!"
    log ""
    log "============================================================"
    log "üéâ AUTONOMOUS DEPLOYMENT COMPLETE!"
    log "============================================================"
    log ""
    log "üìä Bot Status:"
    log "   ‚Ä¢ Running in tmux session: tps19"
    log "   ‚Ä¢ Trading: ACTIVE"
    log "   ‚Ä¢ Telegram: ACTIVE"
    log "   ‚Ä¢ AI Models: ENABLED"
    log ""
    log "üì± You should receive Telegram notifications about trading activity!"
    log ""
    log "üíª To check bot status later:"
    log "   tmux attach -t tps19"
    log "   (Press Ctrl+B then D to detach)"
    log ""
    log "üìÑ Logs saved to:"
    log "   ‚Ä¢ Deployment: $LOG_FILE"
    log "   ‚Ä¢ Bot: ~/tps19/logs/bot_*.log"
    log ""
    log "üîç To view logs:"
    log "   tail -f ~/tps19/logs/bot_*.log"
    log ""
    log "‚úÖ Safe to close your laptop now!"
    log "   The bot will keep running on the VM."
    log "============================================================"
    
    # Send Telegram notification that deployment is complete
    python3 - <<PYEOF
import requests
bot_token = "7289126201:AAHaWTLKxpddtbJ9oa4hGdvKaq0mypqU75Y"
chat_id = "7517400013"
message = """üéâ TPS19 AUTONOMOUS DEPLOYMENT COMPLETE!

‚úÖ Bot Status: RUNNING
üìä Trading: ACTIVE
ü§ñ AI Models: ENABLED
üîî Notifications: ACTIVE

Your trading bot is now running autonomously on Google Cloud.

You can close your laptop - the bot will continue trading 24/7.

Check status anytime by SSH into VM:
tmux attach -t tps19

üìà Happy Trading! üöÄ"""

url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
requests.post(url, json={"chat_id": chat_id, "text": message}, timeout=10)
PYEOF
    
else
    log "‚ùå Failed to start bot"
    log "   Check logs: cat $LOG_FILE"
    exit 1
fi
